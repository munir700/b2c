buildscript {
  repositories {
    jcenter()
    mavenCentral()
  }
  dependencies {
    classpath 'com.github.dcendents:android-maven-gradle-plugin:1.4.1'
  }
}
plugins {
  id "com.jfrog.bintray" version "1.7"
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

def libVersionCode = '2.0.3'
def siteUrl = 'https://github.com/dlazaro66/QRCodeReaderView/tree/master/QRCodeReaderView-lib'
def gitUrl = 'https://github.com/dlazaro66/QRCodeReaderView/tree/master/QRCodeReaderView-lib.git'

group = "com.dlazaro66.qrcodereaderview"
version = libVersionCode

android {
  dataBinding {
    enabled = true
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_1_8
  }

  lintOptions {
    abortOnError false
  }

  compileSdkVersion 30
  buildToolsVersion '26.0.3'

  defaultConfig {
    minSdkVersion 14
    targetSdkVersion 30
    versionCode 1
    versionName libVersionCode
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
    }
  }
}
kapt {
  generateStubs = true
}
dependencies {
  implementation 'com.google.zxing:core:3.4.0'
  testImplementation 'junit:junit:4.13'
  testImplementation 'org.mockito:mockito-core:3.0.0'
  testImplementation "org.robolectric:robolectric:4.2.1"

  // Add missing dependencies for JDK 9+
  if (JavaVersion.current().ordinal() >= JavaVersion.VERSION_1_9.ordinal()) {
    // Add both if you're using both Kotlin and Java

    // If you're using Kotlin
    kapt "com.sun.xml.bind:jaxb-core:2.3.0.1"
    kapt "javax.xml.bind:jaxb-api:2.3.1"
    kapt "com.sun.xml.bind:jaxb-impl:2.3.2"

    // If you're using Java
    annotationProcessor "com.sun.xml.bind:jaxb-core:2.3.0.1"
    annotationProcessor "javax.xml.bind:jaxb-api:2.3.1"
  }
}

install {
  repositories.mavenInstaller {
    pom {
      project {
        packaging 'aar'
        name 'QRCodeReaderView'
        description =
            'Android view which show camera and notify when there\'s a QR code inside the preview.'
        url siteUrl
        licenses {
          license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }
        developers {
          developer {
            id 'dlazaro66'
            name 'David LÃ¡zaro'
            email 'dlazaro66@gmail.com'
          }
        }
        scm {
          connection gitUrl
          developerConnection gitUrl
          url siteUrl
        }
      }
    }
  }
}


bintray {
  user = project.findProperty('bintrayUser')
  key = project.findProperty('bintrayApiKey')
  configurations = ['archives']
  publish = true
  pkg {
    version {
      name = libVersionCode
      desc = 'Android view which show camera and notify when there\'s a QR code inside the preview.'
      released = new Date()
      vcsTag = libVersionCode
      gpg {
        sign = true //Determines whether to GPG sign the files. The default is false
        passphrase = project.findProperty('gpgPassphrase') //Optional. The passphrase for GPG signing'
      }
    }
    repo = "maven"
    name = "QRCodeReaderView"
    websiteUrl = siteUrl
    vcsUrl = gitUrl
    licenses = ["Apache-2.0"]
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.4'
}

task sourcesJar(type: Jar) {
  from android.sourceSets.main.java.srcDirs
  archiveClassifier.set("sources")
}

task javadoc(type: Javadoc) {
  source = android.sourceSets.main.java.srcDirs
  classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  archiveClassifier.set("javadoc")
  from javadoc.destinationDir
}
artifacts {
  archives javadocJar
  archives sourcesJar
}

task findConventions {
  doLast {
    println project.getConvention()
  }
}


